[{"content":"Introduction Programming languages are nothing but programs written by other programmers for you to program your programs. These days developers take programming language for granted, not everyone are interested in understanding the complexity that goes behind a simple \u0026ldquo;Hello world\u0026rdquo; program until they run into issue for their complex program where they need to start digging into the Source code program to find out why there is a weird Null Pointer Exception or memory leak happening in the code.\nEarly day programmers did not have fancy IDEs, intellisense software that could identify errors before even you run the program. They used to write their program on a physical punch card and then run them through the machines (or PC) that would take several hours to execute. There would be an operator who would work on creating and processing these cards on a machine.\nDesigning a programming language is similar to how you would program a simple code for your web API or some automation. The main task that Programing language does is, it allows you to write some instruction and then convert it to form understood by your machine. There are various ways by which you can design your own language. In this article, I will talk about how I designed 2 of my own programming language using a concept of Tree Walking Interpreter.\nThe Beginning Before starting with the program design you\u0026rsquo;d need to decide on what are the programming language constructs that you want to support in the language. Almost all language have these basics covered when it comes to language implementation:\nVariable Declarations Expression evaluation statements like mathematical operation, function call, object declaration etc. Control Statements like if/else, for, while, etc. Object Oriented Programming (OOP) Primitive data structures like Array, Maps/Hash, Set etc. Standard Library for Input/Output Processing, Handling File System reads etc. Tokenization Based on these factors, you can come up with how the syntax of your language should look like and start working on the first stage of compiler or interpreter design called Tokenizer. Tokenization is the first process for any programming language that wants to include source-code processing engine whose responsibility is to take in source code and generate Tokens.\nTokens in C programming language is as simple as \u0026ldquo;if\u0026rdquo;, \u0026ldquo;int\u0026rdquo;, \u0026ldquo;printf\u0026rdquo;, \u0026ldquo;(\u0026rdquo;, \u0026ldquo;)\u0026rdquo; etc. Tokenizer can generate tokens with following information:\nType of Token (Function, Keyword, Identifier, etc) Line number of the Token (Useful when showing errors) Literal value of the Token (Raw string content of text, \u0026ldquo;if\u0026rdquo;, \u0026ldquo;variable_name\u0026rdquo; etc) Parsing In the second stage, we read the tokens generated by the tokenizer and try to build a Syntax tree. This tree contains expressions and statements arranged in well, Tree structure. The tree is build up in such a way that it satisfies the grammar rules for our language. If a user has written a bad code which is syntactically wrong then, at this stage we can alert the user as whatever the rule user has written it breaks the grammar rule. Most compilers would stop from building executables until your code is syntactically correct. In Interpreters, we basically alert user about their code issues and go to a recovery mode where we still continue parsing for more errors.\nFollowing is a example code for my programming language LoxPy:\nvar value = 2 + 3; This generates following syntax tree in LoxPy:\nVar.Statement(\rname = Identifier(\rname = \u0026#34;value\u0026#34;\r),\rvalue = Expression(\rvalue = Add (\rleft = Value(2),\rright = Value(3)\r)\r)\r) This completes the frontend of the programming language. The reason its called frontend because all the rules/syntax for your language is handled in these stages.\nOptimization Program performance is critical when it comes to building faster applications. Early day systems were not as powerful as a personal computers or mobiles that we have today. Programs would take hours or days sometimes to evaluate. Programmers had to work with limited memory for writing their complete program and use some hacks to optimize their code.\nFor my programming language LoxPy and Talion, I haven\u0026rsquo;t used any of the optimization techniques. The AST form is the intermediate representation (IR) for my languages. You can either take AST and optimize it to generate another IR or directly convert AST to a machine level program that can be optimized. There are different strategies to perform code optimization like Dead Code Elimination, Loop Optimization, Speed, Resources etc.\nEvaluation At this stage you need to make decision on how you want to run the program. There are 2 ways you can go about designing this for your programming language:\nCompile: You can take the AST and compile them to a machine executable program. Machine can be your direct system (C, C++, Go) or another virtual machine (Python, Java). The executable file is also termed as byte code.\nInterpret: You can directly start evaluating AST in an underlying backend program. Python is an example for both compiled and interpreted programming language. Here the python code is first compiled to byte code and then interpreted using a Python Virtual Machine.\nOne of the easiest implementation of a interpreter is Tree Walking Interpreter. AST nodes are evaluated node-by-node at each instruction levels.\nEarly implementation of languages like Ruby, R had this technique of evaluation. As each node reference has to be stored in memory, this used to be expensive. If you want to introduce closures, classes to your language then you need to start handling resolution based environment handling (addressing identifier, function, class names) which again lead to storing a complete copy or reference of set of variables in body of these objects.\nLinks Crafting Interpreters: Want to build your own language?\nMy programming languages:\nLoxPy: Github\ntalion: Github\n","permalink":"https://rahuldshetty.github.io/blog/how-i-created-my-own-programming-lanaguage/","summary":"Introduction Programming languages are nothing but programs written by other programmers for you to program your programs. These days developers take programming language for granted, not everyone are interested in understanding the complexity that goes behind a simple \u0026ldquo;Hello world\u0026rdquo; program until they run into issue for their complex program where they need to start digging into the Source code program to find out why there is a weird Null Pointer Exception or memory leak happening in the code.","title":"How I created my own Programming Language ?"},{"content":"Live Demo: Indian Name Classification\nSource Code: Github\nPython Code: Notebook\nIntro to Text Classification Often times human use logic and knowledge to analyze different things. For Example, A botanist could identify and name different species of plants than a normal person. While the normal person could use logic to say how plants differ based on their shape, size and color of the leaves. This problem of identifying the class/category of any object is known as Classification. Our first ancestors may have survived because of their ability to identify dangers and taking appropriate actions. This is the most basic level at which humans have been solving this problem.\nClassification can be applied on different things. It could be phyical objects, entities or even a digital data. In this blog, I have taken a digital text as our source of information for the classification problem.\nText Classification is the problem of identifying a lebel/class for a given set of character strings. These strings could be as simple as a word or could be as long as pages in novels. The output of a text classification problem can be different based on what type of label you are looking for. Lets say that you want to find if the given word is palindrome or not, here the output will be either \u0026ldquo;True\u0026rdquo; or \u0026ldquo;False\u0026rdquo;. It can be only one of them but not both. Such problems are called Binary Classification where the output will be either of the 2 labels.\nThere are also other problems in classification type where the output will not be just a single class but multitude of labels. For example, any movie could belong to multiple genres.\nNote: Make sure you have basic understanding of Python, Keras, React.JS \u0026amp; Web Development.\nName Classification Problem Each human beings have names which are like their identifiers. I wanted to keep things simple and see how can we predict the gender of the person just by using their names. Considering Indian names have this male, female sounds in their names which should make it possible for the AI to learn.\nDataset This Github link contains Male,Female Indian names with classes pre-defined in a CSV file. The names are not processed for text classification but we will be applying some basic transforms.\nFor the output labels we have considered a probability value 0 for a woman and 1 for a man.\nText Transformations Following Transformations where applied on our text dataset which will also be applied when making predictions:\nCase Conversion: All the names are converted to their lower case. Removal of Unwanted characters: We have used basic regex rule to filter out all the characters which are not alphabets nor spaces. Max Length: We have set the max length for all the names to be 10 character size. Anything above will be trimmed and anything short will be appended with space characters. Encoding: We have used word embedding to generate character vectors during training. For this the input should be in numerical array format. We have mapped each of the alphabets \u0026lsquo;a-z\u0026rsquo; to \u0026lsquo;1-26\u0026rsquo; value and space has been given a special value of \u0026lsquo;0\u0026rsquo;. Neural Network Model I have created a 3-layer neural network using the Keras framework. The first layer takens in the word vector and generated a vector embedding which is basically an alternate representation of the word vector in different dimension. The output from this layer is sent to a Densely connected neural network layer which outputs a 512 dimension vector. This is finally mapped to 1 dimensional output value.\nIn the intermediate layer, I have used \u0026lsquo;relu\u0026rsquo; activation so that to keep all the values non-zero. We are using a \u0026lsquo;sigmoid\u0026rsquo; activation function at the final layer which is responsible to generate value between 0-1.\nI have observed that RMSProp optimizer worked well during model training. The model is optimized upon \u0026ldquo;Binary Crossentropy\u0026rdquo; Loss function since we are trying to solve the problem for two classes.\nConverting model for TensorflowJS You can install tensorflowjs_converter cli took that lets you convert tensorflow models into TfJS format. You can learn more about it from here. The command takes in your h5 model file and generates a model folder with a JSON and bin files. The JSON file contains the architecture of your neural network and bin files contain the model weights. Make sure to embed this output in your public folder of your server.\nWeb Application with ReactJS \u0026amp; TensorflowJS I recently started learning ReactJS framework and wanted to create a web application for this model. So I started with the default ReactJS project and installed TensorflowJS framework. The web app contains a simple input form where users can type in their name. I attached a handler function to this input form that will trigger when users type any text. This handler is responsible to take in your text, process them using the text transformations and generating the output probabilities. We have kept a threshold limit of 0.5 and any value above that will be considered a label \u0026ldquo;Male\u0026rdquo; otherwise \u0026ldquo;Female\u0026rdquo;.\nReferences I found these links helpful for writing this blog:\nTensorflowJS API\nReactJS Basics\n","permalink":"https://rahuldshetty.github.io/blog/using-reactjs-tensorflowjs-for-text-classification/","summary":"Live Demo: Indian Name Classification\nSource Code: Github\nPython Code: Notebook\nIntro to Text Classification Often times human use logic and knowledge to analyze different things. For Example, A botanist could identify and name different species of plants than a normal person. While the normal person could use logic to say how plants differ based on their shape, size and color of the leaves. This problem of identifying the class/category of any object is known as Classification.","title":"Using ReactJS \u0026 TensorflowJS for Text Classification"},{"content":"What are Binary Search Trees? This will by my first topic on which I will be showing you guys on how to implement a binary search tree datastructre(DS) and go through the basic fundamentals.\nSo a Binary Search Tree (BST) is a type of graph data structrue where you have many nodes arranged in a reversed tree fashion. Each node starting from the top (which is called as root node) is split into two sub trees. This holds good for all Binary Trees but when it comes to BST there is an addtional property which the tree must hold. This property basically states that \u0026ldquo;values of the nodes on the left subtree much be smaller when compared to the root value and values of the nodes on the right subtree should be larger when compared to the root value.\nNode are the basic units for a BST. In our case, each node holds a value and contains reference to left subtree and right subtree.\nWhat about duplicate values? Well dependening on your use case you can choose to retain or drop the duplicate entry. If you are going to keep them then there are two easy solution. One is to insert this new record on either side of the tree maintaining the BST rule. But this implementation could be tedious and search will require little more effort to find all the entries. Better way to do this is by storing a count/frequency variable for each of node and increase is as and when the nodes are inserted. For the existing node you just find the node and update the count value.\nWhat are the operations that can be performed on BST? A basic implementation of BST can be used to perform the following operations:\nInsert: We add a new node into the BST. Duplicates are ignored. Delete: Removing a node from the BST. Involes Tree re-organization. Search: Checking if a value exists in any of nodes in the BST. Traverse: Visiting each and every node of the BST in some fashion. In-order traversal is common used technique which will print out the elements of the tree in sorted order. There are also other traversal techniques like Pre-Order and Post-Order. Where can I make use of this? There are the some of the typical use case where people tend to go with BST:\nSorting: Maintaing a sorted stream of data. Other Data Structure Implementation: TreeMap and TreeSet DataStructure in Java uses BST internally. Dark side of the BST? Let us consider a scenario where a BST is created in such a way that it keeps growing at one sides. There is more general term for this called Skew. If the nodes are inserted to every node\u0026rsquo;s left subtree and until it forms this linear chained nodes, this type of BST is said to be left-skewed. A search operation will have to go through each and every N nodes of this tree to find the value so the worst case time complexity is said to be O(n). Similar can happen while adding and deleting the nodes.\nHow to improve BST? You might have thought by now, if the problem with BST occurs when it keeps adding the nodes to only one side then if we could split up or do some operation that would re-organize the tree. This type of data structure is called Self-Balancing BST. I might be writing about them in the future.\nCode First and foremast part of creating this BST is to create the basic units, which is Node. Each node stores a value and contains references to left and right subtrees.\nThen we can create a BST data structure with all the operations. We are using class to define the template. Each object of this class will contain a private member called root which is only accessible within the member functions. Each of the operations use a recursive logic to perform the action. So for this we made use of nested functions which will handle the recursive calls.\nJust to test out if the implementation is right or wrong, I have created this sample file which will create an empty BST and does all the operations on the Tree. Notice that for In-Order traversal, the path printed by tree contains node value in sorted manner.\nReferences I found these links helpful for writing this blog:\nBST Basics\nBST Delete\nHandling Duplicates in BST\nApplications\n","permalink":"https://rahuldshetty.github.io/blog/how-to-create-binary-search-tree/","summary":"What are Binary Search Trees? This will by my first topic on which I will be showing you guys on how to implement a binary search tree datastructre(DS) and go through the basic fundamentals.\nSo a Binary Search Tree (BST) is a type of graph data structrue where you have many nodes arranged in a reversed tree fashion. Each node starting from the top (which is called as root node) is split into two sub trees.","title":"How to create binary search tree in Python3?"},{"content":"How I Created my Blog? I always wanted to have my own personal blog. I had explored different website building solutions like Weebly, Wix but the amount of freedom to do things with them are limited. Even I had started learning React.Js to build one from scratch but it was exhausting to do things. And finally, I found this framework called Hugo which lets you design and maintain websites by using simple Markdown language and supports large theme.\nAfter going through dozen of posts, I found this theme PaperMod.\nYou can easily set it up by installing Hugo and following this Getting Started document.\n","permalink":"https://rahuldshetty.github.io/blog/1st-post/","summary":"How I Created my Blog? I always wanted to have my own personal blog. I had explored different website building solutions like Weebly, Wix but the amount of freedom to do things with them are limited. Even I had started learning React.Js to build one from scratch but it was exhausting to do things. And finally, I found this framework called Hugo which lets you design and maintain websites by using simple Markdown language and supports large theme.","title":"Hello World!"}]